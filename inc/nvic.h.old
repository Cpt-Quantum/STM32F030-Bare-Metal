#ifndef NVIC_H
#define NVIC_H

#include <stdint.h>
#include <stdbool.h>
#include "common.h"
#include "irq.h"

#define NVIC_BASE (SCS_BASE + 0x0100)

#define NVIC_PRIO_BITS 2

typedef struct
{
	volatile uint32_t iser;
	volatile uint32_t res_1_31[31];
	volatile uint32_t icer;
	volatile uint32_t res_33_63[31];
	volatile uint32_t ispr;
	volatile uint32_t res_65_95[31];
	volatile uint32_t icpr;
	volatile uint32_t res_97_127[31];
	volatile uint32_t res_128_192[64];
	/* NB: The ipr registers are still 32 bit, but the priorities are broken */
	/* into 8 bit chunks.                                                    */
	volatile uint8_t ipr[8 * 4];
} nvic_t;

static volatile nvic_t * const nvic = (volatile nvic_t *) NVIC_BASE;

static inline void NVIC_SetPriority(IRQ_E irq, unsigned priority)
{
	nvic->ipr[irq] = (priority << (8 - NVIC_PRIO_BITS));
}

static inline void NVIC_EnableIRQ(IRQ_E irq)
{
	/* NB: The & with 0x1F is to clip the bit shift at 31 */
	nvic->iser = (uint32_t)(1U << (irq & 0x1FUL));
}

#endif //NVIC_H
